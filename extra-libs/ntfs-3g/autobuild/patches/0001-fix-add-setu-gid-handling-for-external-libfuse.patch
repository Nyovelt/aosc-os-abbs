From 6b189259e85bf2d83423fc10c1aa908295f18255 Mon Sep 17 00:00:00 2001
From: Kay Lin <kaymw@aosc.io>
Date: Thu, 16 Jun 2022 18:10:07 -0700
Subject: [PATCH 1/2] fix: add setu/gid handling for external libfuse

Many packagers use the external libfuse for new upstream improvements
and to avoid redundancy. There is no good technical reason to keep the
priviallage handling to internal libfuse only, so let's fix that.

I am slightly concerned at not seeing some of the mount point permission
checks found in upstream libfuse fusermount in our current mount
implementation. This would be a bug shared with internal libfuse, and I
do not intend to reach that far now.

Co-authored-by: Mingye Wang <arthur200126@gmail.com>
---
 libfuse-lite/fusermount.c | 101 ++---------------------------------
 libfuse-lite/priv.h       | 107 ++++++++++++++++++++++++++++++++++++++
 src/lowntfs-3g.c          |  27 ++--------
 src/ntfs-3g.c             |  23 +-------
 4 files changed, 116 insertions(+), 142 deletions(-)
 create mode 100644 libfuse-lite/priv.h

diff --git a/libfuse-lite/fusermount.c b/libfuse-lite/fusermount.c
index 680fee1c..689d1fee 100644
--- a/libfuse-lite/fusermount.c
+++ b/libfuse-lite/fusermount.c
@@ -45,35 +45,14 @@ static const char *progname = "ntfs-3g-mount";
 
 static int mount_max = 1000;
 
-int drop_privs(void);
-int restore_privs(void);
-
-#ifdef __SOLARIS__
+#include "priv.h"
 
+#ifndef __SOLARIS__
 /*
  * fusermount is not implemented in fuse-lite for Solaris,
  * only the minimal functions are provided.
  */
 
-/*
- * Solaris doesn't have setfsuid/setfsgid.
- * This doesn't really matter anyway as this program shouldn't be made
- * suid on Solaris. It should instead be used via a profile with the
- * sys_mount privilege.
- */
-
-int drop_privs(void)
-{
-    return (0);
-}
-
-int restore_privs(void)
-{
-    return (0);
-}
-
-#else /* __SOLARIS__ */
-
 static const char *get_user_name(void)
 {
     struct passwd *pw = getpwuid(getuid());
@@ -85,80 +64,6 @@ static const char *get_user_name(void)
     }
 }
 
-int drop_privs(void)
-{
-	if (!getegid()) {
-
-		gid_t new_gid = getgid();
-
-		if (setresgid(-1, new_gid, getegid()) < 0) {
-			perror("priv drop: setresgid failed");
-			return -1;
-		}
-		if (getegid() != new_gid){
-			perror("dropping group privilege failed");
-			return -1;
-		}
-	}
-	
-	if (!geteuid()) {
-
-		uid_t new_uid = getuid();
-
-		if (setresuid(-1, new_uid, geteuid()) < 0) {
-			perror("priv drop: setresuid failed");
-			return -1;
-		}
-		if (geteuid() != new_uid){
-			perror("dropping user privilege failed");
-			return -1;
-		}
-	}
-	
-	return 0;
-}
-
-int restore_privs(void)
-{
-	if (geteuid()) {
-		
-		uid_t ruid, euid, suid;
-
-		if (getresuid(&ruid, &euid, &suid) < 0) {
-			perror("priv restore: getresuid failed");
-			return -1;
-		}
-		if (setresuid(-1, suid, -1) < 0) {
-			perror("priv restore: setresuid failed");
-			return -1;
-		}
-		if (geteuid() != suid) {
-			perror("restoring privilege failed");
-			return -1;
-		}
-	}
-
-	if (getegid()) {
-
-		gid_t rgid, egid, sgid;
-
-		if (getresgid(&rgid, &egid, &sgid) < 0) {
-			perror("priv restore: getresgid failed");
-			return -1;
-		}
-		if (setresgid(-1, sgid, -1) < 0) {
-			perror("priv restore: setresgid failed");
-			return -1;
-		}
-		if (getegid() != sgid){
-			perror("restoring group privilege failed");
-			return -1;
-		}
-	}
-	
-	return 0;
-}
-
 #ifndef IGNORE_MTAB
 static int add_mount(const char *source, const char *mnt, const char *type,
                      const char *opts)
@@ -699,7 +604,7 @@ int fusermount(int unmount, int quiet, int lazy, const char *opts,
 out:    
     umask(old_umask);
     free(mnt);
-    return res;	    
+    return res;
 }
 
 #endif /* __SOLARIS__ */
diff --git a/libfuse-lite/priv.h b/libfuse-lite/priv.h
new file mode 100644
index 00000000..d43feffa
--- /dev/null
+++ b/libfuse-lite/priv.h
@@ -0,0 +1,107 @@
+
+/*
+    FUSE: Filesystem in Userspace
+    Copyright (C) 2001-2007  Miklos Szeredi <miklos@szeredi.hu>
+
+    This program can be distributed under the terms of the GNU GPL.
+    See the file COPYING.
+*/
+/* This header allows for sharing of the two functions among internal
+ * and external fuse builds. */
+
+int drop_privs(void);
+int restore_privs(void);
+
+#ifdef __SOLARIS__
+/*
+ * Solaris doesn't have setfsuid/setfsgid.
+ * This doesn't really matter anyway as this program shouldn't be made
+ * suid on Solaris. It should instead be used via a profile with the
+ * sys_mount privilege.
+ */
+
+int drop_privs(void)
+{
+    return (0);
+}
+
+int restore_privs(void)
+{
+    return (0);
+}
+
+#else /* __SOLARIS__ */
+int drop_privs(void)
+{
+	if (!getegid()) {
+
+		gid_t new_gid = getgid();
+
+		if (setresgid(-1, new_gid, getegid()) < 0) {
+			perror("priv drop: setresgid failed");
+			return -1;
+		}
+		if (getegid() != new_gid){
+			perror("dropping group privilege failed");
+			return -1;
+		}
+	}
+
+	if (!geteuid()) {
+
+		uid_t new_uid = getuid();
+
+		if (setresuid(-1, new_uid, geteuid()) < 0) {
+			perror("priv drop: setresuid failed");
+			return -1;
+		}
+		if (geteuid() != new_uid){
+			perror("dropping user privilege failed");
+			return -1;
+		}
+	}
+
+	return 0;
+}
+
+int restore_privs(void)
+{
+	if (geteuid()) {
+
+		uid_t ruid, euid, suid;
+
+		if (getresuid(&ruid, &euid, &suid) < 0) {
+			perror("priv restore: getresuid failed");
+			return -1;
+		}
+		if (setresuid(-1, suid, -1) < 0) {
+			perror("priv restore: setresuid failed");
+			return -1;
+		}
+		if (geteuid() != suid) {
+			perror("restoring privilege failed");
+			return -1;
+		}
+	}
+
+	if (getegid()) {
+
+		gid_t rgid, egid, sgid;
+
+		if (getresgid(&rgid, &egid, &sgid) < 0) {
+			perror("priv restore: getresgid failed");
+			return -1;
+		}
+		if (setresgid(-1, sgid, -1) < 0) {
+			perror("priv restore: setresgid failed");
+			return -1;
+		}
+		if (getegid() != sgid){
+			perror("restoring group privilege failed");
+			return -1;
+		}
+	}
+
+	return 0;
+}
+#endif /* __SOLARIS__ */
diff --git a/src/lowntfs-3g.c b/src/lowntfs-3g.c
index 9330500c..3300fd2f 100644
--- a/src/lowntfs-3g.c
+++ b/src/lowntfs-3g.c
@@ -286,13 +286,7 @@ static const char ntfs_bad_reparse[] = "unsupported reparse tag 0x%08lx";
 int drop_privs(void);
 int restore_privs(void);
 #else
-/*
- * setuid and setgid root ntfs-3g denies to start with external FUSE, 
- * therefore the below functions are no-op in such case.
- */
-static int drop_privs(void)    { return 0; }
-#if defined(linux) || defined(__uClinux__)
-static int restore_privs(void) { return 0; }
+#include "../libfuse-lite/priv.h"
 #endif
 
 static const char *setuid_msg =
@@ -307,7 +301,7 @@ static const char *unpriv_fuseblk_msg =
 "library. Either mount the volume as root, or rebuild NTFS-3G with integrated\n"
 "FUSE support and make it setuid root. Please see more information at\n"
 "https://github.com/tuxera/ntfs-3g/wiki/NTFS-3G-FAQ\n";
-#endif	
+#endif
 
 
 static void ntfs_fuse_update_times(ntfs_inode *ni, ntfs_time_update_flags mask)
@@ -3245,7 +3239,7 @@ static void ntfs_fuse_bmap(fuse_req_t req, fuse_ino_t ino, size_t blocksize,
 	ntfs_attr *na;
 	LCN lcn;
 	uint64_t lidx = 0;
-	int ret = 0; 
+	int ret = 0;
 	int cl_per_bl = ctx->vol->cluster_size / blocksize;
 
 	if (blocksize > ctx->vol->cluster_size) {
@@ -4621,12 +4615,6 @@ int main(int argc, char *argv[])
 			close(fd);
 	} while (fd >= 0 && fd <= 2);
 
-#ifndef FUSE_INTERNAL
-	if ((getuid() != geteuid()) || (getgid() != getegid())) {
-		fprintf(stderr, "%s", setuid_msg);
-		return NTFS_VOLUME_INSECURE;
-	}
-#endif
 	if (drop_privs())
 		return NTFS_VOLUME_NO_PRIVILEGE;
         
@@ -4704,7 +4692,7 @@ int main(int argc, char *argv[])
 
 	if (drop_privs())
 		goto err_out;
-#endif  
+#endif
 	if (stat(opts.device, &sbuf)) {
 		ntfs_log_perror("Failed to access '%s'", opts.device);
 		err = NTFS_VOLUME_NO_PRIVILEGE;
@@ -4717,13 +4705,6 @@ int main(int argc, char *argv[])
 		ctx->blkdev = TRUE;
 #endif
 
-#ifndef FUSE_INTERNAL
-	if (getuid() && ctx->blkdev) {
-		ntfs_log_error("%s", unpriv_fuseblk_msg);
-		err = NTFS_VOLUME_NO_PRIVILEGE;
-		goto err2;
-	}
-#endif
 	err = ntfs_open(opts.device);
 	if (err)
 		goto err_out;
diff --git a/src/ntfs-3g.c b/src/ntfs-3g.c
index d8227e71..1fee91f7 100644
--- a/src/ntfs-3g.c
+++ b/src/ntfs-3g.c
@@ -221,13 +221,7 @@ static const char ntfs_bad_reparse[] = "unsupported reparse tag 0x%08lx";
 int drop_privs(void);
 int restore_privs(void);
 #else
-/*
- * setuid and setgid root ntfs-3g denies to start with external FUSE, 
- * therefore the below functions are no-op in such case.
- */
-static int drop_privs(void)    { return 0; }
-#if defined(linux) || defined(__uClinux__)
-static int restore_privs(void) { return 0; }
+#include "../libfuse-lite/priv.h"
 #endif
 
 static const char *setuid_msg =
@@ -242,7 +236,7 @@ static const char *unpriv_fuseblk_msg =
 "library. Either mount the volume as root, or rebuild NTFS-3G with integrated\n"
 "FUSE support and make it setuid root. Please see more information at\n"
 "https://github.com/tuxera/ntfs-3g/wiki/NTFS-3G-FAQ\n";
-#endif	
+#endif
 
 
 /**
@@ -4349,12 +4343,6 @@ int main(int argc, char *argv[])
 			close(fd);
 	} while (fd >= 0 && fd <= 2);
 
-#ifndef FUSE_INTERNAL
-	if ((getuid() != geteuid()) || (getgid() != getegid())) {
-		fprintf(stderr, "%s", setuid_msg);
-		return NTFS_VOLUME_INSECURE;
-	}
-#endif
 	if (drop_privs())
 		return NTFS_VOLUME_NO_PRIVILEGE;
 	
@@ -4445,13 +4433,6 @@ int main(int argc, char *argv[])
 		ctx->blkdev = TRUE;
 #endif
 
-#ifndef FUSE_INTERNAL
-	if (getuid() && ctx->blkdev) {
-		ntfs_log_error("%s", unpriv_fuseblk_msg);
-		err = NTFS_VOLUME_NO_PRIVILEGE;
-		goto err2;
-	}
-#endif
 	err = ntfs_open(opts.device);
 	if (err)
 		goto err_out;
-- 
2.36.0

