#
#  Backport updating of js/src/builtin/ReflectParse.cpp stuff for optchain support:
#
#    bug 1610447
#    bug 1611777 part4 (ReflectParse.cpp chunk only)
#    bug 1657835
#

diff -Nrup mozilla-OLD/js/src/builtin/ReflectParse.cpp mozilla/js/src/builtin/ReflectParse.cpp
--- mozilla-OLD/js/src/builtin/ReflectParse.cpp	2022-01-12 02:34:03.802674404 +0300
+++ mozilla/js/src/builtin/ReflectParse.cpp	2022-01-12 01:29:40.048226482 +0300
@@ -166,7 +166,7 @@ static const char* const unopNames[] = {
     "~",       /* UNOP_BITNOT */
     "typeof",  /* UNOP_TYPEOF */
     "void",    /* UNOP_VOID */
-    "await"    /* UNOP_AWAIT */
+    "await",   /* UNOP_AWAIT */
 };
 
 static const char* const nodeTypeNames[] = {
@@ -579,10 +579,11 @@ class NodeBuilder
                                     MutableHandleValue dst);
 
     MOZ_MUST_USE bool callExpression(HandleValue callee, NodeVector& args, TokenPos* pos,
-                                     MutableHandleValue dst);
+                                     MutableHandleValue dst, bool isOptional = false);
 
     MOZ_MUST_USE bool memberExpression(bool computed, HandleValue expr, HandleValue member,
-                                       TokenPos* pos, MutableHandleValue dst);
+                                       TokenPos* pos, MutableHandleValue dst,
+                                       bool isOptional = false);
 
     MOZ_MUST_USE bool arrayExpression(NodeVector& elts, TokenPos* pos, MutableHandleValue dst);
 
@@ -596,6 +597,11 @@ class NodeBuilder
 
     MOZ_MUST_USE bool spreadExpression(HandleValue expr, TokenPos* pos, MutableHandleValue dst);
 
+    MOZ_MUST_USE bool optionalExpression(HandleValue expr, TokenPos* pos, MutableHandleValue dst);
+
+    MOZ_MUST_USE bool deleteOptionalExpression(HandleValue expr, TokenPos* pos,
+                                               MutableHandleValue dst);
+
     MOZ_MUST_USE bool computedName(HandleValue name, TokenPos* pos, MutableHandleValue dst);
 
     MOZ_MUST_USE bool objectExpression(NodeVector& elts, TokenPos* pos, MutableHandleValue dst);
@@ -1119,7 +1125,7 @@ NodeBuilder::sequenceExpression(NodeVect
 
 bool
 NodeBuilder::callExpression(HandleValue callee, NodeVector& args, TokenPos* pos,
-                            MutableHandleValue dst)
+                            MutableHandleValue dst, bool isOptional)
 {
     RootedValue array(cx);
     if (!newArray(args, &array))
@@ -1129,7 +1135,7 @@ NodeBuilder::callExpression(HandleValue
     if (!cb.isNull())
         return callback(cb, callee, array, pos, dst);
 
-    return newNode(AST_CALL_EXPR, pos,
+    return newNode(isOptional ? AST_OPT_CALL_EXPR : AST_CALL_EXPR, pos,
                    "callee", callee,
                    "arguments", array,
                    dst);
@@ -1155,7 +1161,7 @@ NodeBuilder::newExpression(HandleValue c
 
 bool
 NodeBuilder::memberExpression(bool computed, HandleValue expr, HandleValue member, TokenPos* pos,
-                              MutableHandleValue dst)
+                              MutableHandleValue dst, bool isOptional)
 {
     RootedValue computedVal(cx, BooleanValue(computed));
 
@@ -1163,7 +1169,7 @@ NodeBuilder::memberExpression(bool compu
     if (!cb.isNull())
         return callback(cb, computedVal, expr, member, pos, dst);
 
-    return newNode(AST_MEMBER_EXPR, pos,
+    return newNode(isOptional ? AST_OPT_MEMBER_EXPR : AST_MEMBER_EXPR, pos,
                    "object", expr,
                    "property", member,
                    "computed", computedVal,
@@ -1230,6 +1236,20 @@ NodeBuilder::spreadExpression(HandleValu
 }
 
 bool
+NodeBuilder::optionalExpression(HandleValue expr, TokenPos* pos, MutableHandleValue dst) {
+    return newNode(AST_OPTIONAL_EXPR, pos,
+                   "expression", expr,
+                   dst);
+}
+
+bool
+NodeBuilder::deleteOptionalExpression(HandleValue expr, TokenPos* pos, MutableHandleValue dst) {
+    return newNode(AST_DELETE_OPTIONAL_EXPR, pos,
+                   "expression", expr,
+                   dst);
+}
+
+bool
 NodeBuilder::propertyPattern(HandleValue key, HandleValue patt, bool isShorthand, TokenPos* pos,
                              MutableHandleValue dst)
 {
@@ -2940,9 +2960,22 @@ ASTSerializer::expression(ParseNode* pn,
       case ParseNodeKind::GenExp:
         return generatorExpression(pn->generatorExpr(), dst);
 
+      case ParseNodeKind::DeleteOptionalChain: {
+        RootedValue expr(cx);
+        return expression(pn->pn_kid, &expr) &&
+               builder.deleteOptionalExpression(expr, &pn->pn_pos, dst);
+      }
+
+      case ParseNodeKind::OptionalChain: {
+        RootedValue expr(cx);
+        return expression(pn->pn_kid, &expr) &&
+               builder.optionalExpression(expr, &pn->pn_pos, dst);
+      }
+
       case ParseNodeKind::New:
       case ParseNodeKind::TaggedTemplate:
       case ParseNodeKind::Call:
+      case ParseNodeKind::OptionalCall:
       case ParseNodeKind::SuperCall:
       {
         ParseNode* pn_callee = pn->pn_left;
@@ -2975,13 +3008,15 @@ ASTSerializer::expression(ParseNode* pn,
         if (pn->getKind() == ParseNodeKind::TaggedTemplate)
             return builder.taggedTemplate(callee, args, &pn->pn_pos, dst);
 
+        bool isOptional = pn->isKind(ParseNodeKind::OptionalCall);
+
         // SUPERCALL is Call(super, args)
         return pn->isKind(ParseNodeKind::New)
                ? builder.newExpression(callee, args, &pn->pn_pos, dst)
-
-            : builder.callExpression(callee, args, &pn->pn_pos, dst);
+               : builder.callExpression(callee, args, &pn->pn_pos, dst, isOptional);
       }
 
+      case ParseNodeKind::OptionalDot:
       case ParseNodeKind::Dot:
       {
         MOZ_ASSERT(pn->pn_pos.encloses(pn->pn_left->pn_pos));
@@ -2990,7 +3025,9 @@ ASTSerializer::expression(ParseNode* pn,
         RootedValue propname(cx);
         RootedAtom pnAtom(cx, pn->pn_right->pn_atom);
 
-        if (pn->as<PropertyAccess>().isSuper()) {
+        bool isOptional = pn->isKind(ParseNodeKind::OptionalDot);
+
+        if (!isOptional && pn->as<PropertyAccess>().isSuper()) {
             if (!builder.super(&pn->pn_left->pn_pos, &expr))
                 return false;
         } else {
@@ -2999,9 +3036,11 @@ ASTSerializer::expression(ParseNode* pn,
         }
 
         return identifier(pnAtom, nullptr, &propname) &&
-               builder.memberExpression(false, expr, propname, &pn->pn_pos, dst);
+               builder.memberExpression(false, expr, propname, &pn->pn_pos, dst,
+                                        isOptional);
       }
 
+      case ParseNodeKind::OptionalElem:
       case ParseNodeKind::Elem:
       {
         MOZ_ASSERT(pn->pn_pos.encloses(pn->pn_left->pn_pos));
@@ -3009,7 +3048,9 @@ ASTSerializer::expression(ParseNode* pn,
 
         RootedValue left(cx), right(cx);
 
-        if (pn->as<PropertyByValue>().isSuper()) {
+        bool isOptional = pn->isKind(ParseNodeKind::OptionalElem);
+
+        if (!isOptional && pn->as<PropertyByValue>().isSuper()) {
             if (!builder.super(&pn->pn_left->pn_pos, &left))
                 return false;
         } else {
@@ -3018,7 +3059,8 @@ ASTSerializer::expression(ParseNode* pn,
         }
 
         return expression(pn->pn_right, &right) &&
-               builder.memberExpression(true, left, right, &pn->pn_pos, dst);
+               builder.memberExpression(true, left, right, &pn->pn_pos, dst,
+                                        isOptional);
       }
 
       case ParseNodeKind::CallSiteObj:
diff -Nrup mozilla-OLD/js/src/jsast.tbl mozilla/js/src/jsast.tbl
--- mozilla-OLD/js/src/jsast.tbl	2022-01-12 02:34:03.814674317 +0300
+++ mozilla/js/src/jsast.tbl	2022-01-12 00:48:25.442649220 +0300
@@ -27,10 +27,14 @@ ASTDEF(AST_LOGICAL_EXPR,          "Logic
 ASTDEF(AST_UPDATE_EXPR,           "UpdateExpression",               "updateExpression")
 ASTDEF(AST_NEW_EXPR,              "NewExpression",                  "newExpression")
 ASTDEF(AST_CALL_EXPR,             "CallExpression",                 "callExpression")
+ASTDEF(AST_OPT_CALL_EXPR,         "OptionalCallExpression",         "optionalCallExpression")
 ASTDEF(AST_MEMBER_EXPR,           "MemberExpression",               "memberExpression")
+ASTDEF(AST_OPT_MEMBER_EXPR,       "OptionalMemberExpression",       "optionalMemberExpression")
 ASTDEF(AST_FUNC_EXPR,             "FunctionExpression",             "functionExpression")
 ASTDEF(AST_ARROW_EXPR,            "ArrowFunctionExpression",        "arrowFunctionExpression")
 ASTDEF(AST_ARRAY_EXPR,            "ArrayExpression",                "arrayExpression")
+ASTDEF(AST_DELETE_OPTIONAL_EXPR,  "DeleteOptionalExpression",       "deleteOptionalExpression")
+ASTDEF(AST_OPTIONAL_EXPR,         "OptionalExpression",             "optionalExpression")
 ASTDEF(AST_SPREAD_EXPR,           "SpreadExpression",               "spreadExpression")
 ASTDEF(AST_OBJECT_EXPR,           "ObjectExpression",               "objectExpression")
 ASTDEF(AST_THIS_EXPR,             "ThisExpression",                 "thisExpression")
